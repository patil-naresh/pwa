{"version":3,"file":"static/js/105.f36d65bf.chunk.js","mappings":"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","sources":["Todo.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport './App.css';\r\n\r\nconst Todo = () => {\r\n  const [dbName] = useState('toDoListApp')\r\n  const [objectStoreName] = useState('toDoList')\r\n  const [db, setDb] = useState<any>(null);\r\n  const [tasks, setTasks] = React.useState<{ text: string, done: boolean }[]>([]);\r\n  const [remainingTasks, setRemainingTasks] = React.useState(0);\r\n  const addTaskInput: any = React.useRef();\r\n\r\n  const addTask = () => {\r\n    const newTask = addTaskInput?.current?.value;\r\n    if (newTask && !tasks.some((task) => task.text === newTask)) {\r\n      const newTaskObj = {\r\n        text: newTask,\r\n        done: false,\r\n      };\r\n      setTasks((tasks) => {\r\n        return [...tasks, newTaskObj];\r\n      });\r\n      addTaskInput.current.value = \"\";\r\n      addTaskInput?.current?.focus();\r\n    }\r\n  }\r\n\r\n  const handleKey = ({ keyCode, target }: any) => {\r\n    if (keyCode === 13) {\r\n      addTask();\r\n    } else {\r\n      if (!tasks.some((task) => task.text === target.value)) {\r\n        addTaskInput.current.classList.remove(\"invalid\");\r\n      } else {\r\n        addTaskInput.current.classList.add(\"invalid\");\r\n      }\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setRemainingTasks(\r\n      tasks.filter((taskItem) => taskItem.done === false).length\r\n    );\r\n    if (db) {\r\n      const transaction = db.transaction([objectStoreName], 'readwrite');\r\n      const objectStore = transaction.objectStore(objectStoreName);\r\n      const clearRequest = objectStore.clear();\r\n\r\n      clearRequest.onerror = (event: any) => {\r\n        console.error('Failed to add data');\r\n      };\r\n\r\n      clearRequest.onsuccess = (event: any) => {\r\n        const addRequest = objectStore.add({ tasks: tasks })\r\n        addRequest.addRequest = (event: any) => {\r\n          console.log('Data added successfully');\r\n        };\r\n      };\r\n    }\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const request = window.indexedDB.open(dbName);\r\n    request.onerror = (event) => {\r\n      console.log('Failed to open database');\r\n    };\r\n\r\n    request.onsuccess = (event: any) => {\r\n      const db = event?.target?.result;\r\n      setDb(db);\r\n      const transaction = db.transaction([objectStoreName], 'readwrite');\r\n      const objectStore = transaction.objectStore(objectStoreName);\r\n      const storeRequest = objectStore.getAll();\r\n      storeRequest.onsuccess = (event: { target: { result: any; }; }) => {\r\n        setTasks(event.target.result[0].tasks);\r\n      };\r\n    };\r\n\r\n    request.onupgradeneeded = (event: any) => {\r\n      const db = event.target.result;\r\n      db.createObjectStore(objectStoreName, { keyPath: 'id', autoIncrement: true });\r\n    };\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"todo\">\r\n        <div className=\"todo-header\">\r\n          <h1>Todo List</h1>\r\n          <small>\r\n            {tasks.length > 0 && remainingTasks === 0 ? (\r\n              \"All done! =D\"\r\n            ) : (\r\n              <>\r\n                You have <b>{remainingTasks}</b> of <b>{tasks.length}</b> tasks remaining\r\n              </>\r\n            )}\r\n          </small>\r\n        </div>\r\n        <div className=\"todo-form\">\r\n          <input ref={addTaskInput}\r\n            type=\"text\" placeholder=\"Add task...\"\r\n            onKeyUp={handleKey}\r\n          />\r\n          <button onClick={addTask}>+</button>\r\n        </div>\r\n        <div className=\"todo-body\">\r\n          <List tasks={tasks} setTasks={setTasks} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst List = ({ tasks, setTasks }: any) => {\r\n  return tasks.length > 0 ?\r\n    <ul className=\"todo-list\">\r\n      {tasks.map((task: any, taskIndex: React.Key | null | undefined) => <Task key={taskIndex} taskId={taskIndex} task={task} setTasks={setTasks} />)}\r\n    </ul>\r\n    :\r\n    <div className=\"empty\">\r\n      <p>\r\n        <svg viewBox=\"0 0 21 21\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" transform=\"translate(2.5 4.5)\">\r\n            <path d=\"m3.65939616 0h8.68120764c.4000282 0 .7615663.23839685.9191451.6060807l2.7402511 6.3939193v4c0 1.1045695-.8954305 2-2 2h-12c-1.1045695 0-2-.8954305-2-2v-4l2.74025113-6.3939193c.15757879-.36768385.51911692-.6060807.91914503-.6060807z\" />\r\n            <path d=\"m0 7h4c.55228475 0 1 .44771525 1 1v1c0 .55228475.44771525 1 1 1h4c.5522847 0 1-.44771525 1-1v-1c0-.55228475.4477153-1 1-1h4\" />\r\n          </g>\r\n        </svg>\r\n      </p>\r\n      <p>\r\n        <b>Empty list</b>\r\n      </p>\r\n      <p>Add a new task above</p>\r\n    </div>\r\n};\r\n\r\nconst Task = ({ taskId, task, setTasks }: any) => {\r\n  const removeTask = () => {\r\n    setTasks((tasks: any[]) => {\r\n      return tasks.filter((taskItem: any, taskIndex: any) => taskIndex !== taskId);\r\n    });\r\n  }\r\n\r\n  const toggleTask = () => {\r\n    const doneStatus = !task.done;\r\n    setTasks((tasks: any[]) => {\r\n      return tasks.map((taskItem: any, taskIndex: any) => {\r\n        if (taskIndex === taskId) {\r\n          return {\r\n            text: task.text,\r\n            done: doneStatus,\r\n          };\r\n        }\r\n        return taskItem;\r\n      });\r\n    });\r\n  }\r\n\r\n  const prefixClass = \"task-item\";\r\n  const doneClass = task.done ? \" done\" : \"\";\r\n\r\n  return (\r\n    <li className={prefixClass + doneClass}>\r\n      <div className={prefixClass + \"-infos\"}>\r\n        <label className={prefixClass + \"-checkbox\"}>\r\n          <input type=\"checkbox\" onChange={toggleTask} checked={task.done} />\r\n          <div className={prefixClass + \"-checkbox-el\"}></div>\r\n        </label>\r\n        <div className={prefixClass + \"-text\"}>{task.text}</div>\r\n      </div>\r\n      <div className={prefixClass + \"-remove\"}>\r\n        <button onClick={removeTask} title=\"Remover item\">\r\n          <svg\r\n            height=\"21\"\r\n            viewBox=\"0 0 21 21\"\r\n            width=\"21\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <g fill=\"none\" fillRule=\"evenodd\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" transform=\"translate(5 5)\">\r\n              <path d=\"m10.5 10.5-10-10z\" />\r\n              <path d=\"m10.5.5-10 10\" />\r\n            </g>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Todo;"],"names":["List","_ref2","tasks","setTasks","length","_jsx","className","children","map","task","taskIndex","Task","taskId","_jsxs","viewBox","xmlns","fill","fillRule","stroke","strokeLinecap","strokeLinejoin","transform","d","_ref3","prefixClass","doneClass","done","type","onChange","toggleTask","doneStatus","taskItem","text","checked","onClick","removeTask","filter","title","height","width","Todo","dbName","useState","objectStoreName","db","setDb","React","remainingTasks","setRemainingTasks","addTaskInput","addTask","_addTaskInput$current","newTask","current","value","some","_addTaskInput$current2","newTaskObj","focus","objectStore","transaction","clearRequest","clear","onerror","event","console","error","onsuccess","add","addRequest","log","useEffect","request","window","indexedDB","open","_event$target","target","result","getAll","onupgradeneeded","createObjectStore","keyPath","autoIncrement","_Fragment","ref","placeholder","onKeyUp","_ref","keyCode","classList","remove"],"sourceRoot":""}